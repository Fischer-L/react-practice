schema {
  query: Query
  mutation: Mutation
}

type Query {
  hello(name: String!): String!
  listMenuItems: [MenuItem!]!
  listTables: [Table]!
  getOrderItems(orderId: String!): [OrderItem]!
}

type Mutation {
  wink(name: String!): String!
  createOrder(data: CreateOrderInput!): OrderResponse!
  updateOrder(data: UpdateOrderInput!): OrderResponse!
  check(tableId: String!): Boolean
}

type Table {
  id: String!,
  orderId: String,
  orderStatus: OrderStatus
}

enum OrderStatus {
  ORDERED,
  PAYED
}

type MenuItem {
  id: Int!,
  name: String!,
  price: Float!,
}

input CreateOrderInput {
  tableId: String!,
  orderItem: [OrderItemInput]
}

type OrderResponse {
  id: String!,
  tableId: String!,
  orderItem: [OrderItem],
  status: String!,
}

input UpdateOrderInput {
  orderId: String!,
  orderItem: [OrderItemInput]
}

type OrderItem {
  menuId: String!,
  count: Int!,
}

input OrderItemInput {
  menuId: String!,
  count: Int!,
}
